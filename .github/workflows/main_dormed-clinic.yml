name: Build and deploy Dormed Clinic app from local self-hosted runner

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted   # This will run on your local machine

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create Python virtual environment
        # Create the venv in the root of the repository.
        run: |
          python -m venv venv

      - name: Install Python dependencies
        # Activate the venv from the root and install requirements.txt (which is also in the root).
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build React frontend
        # Navigate into the 'frontend' directory for npm commands.
        run: |
          cd frontend
          npm install
          npm run build

      - name: Prepare deployment package
        # Add a small delay to ensure all previous writes are flushed
        # before creating the tar archive.
        run: |
          echo "Waiting 5 seconds for filesystem to settle..."
          sleep 5 # Wait for 5 seconds
          tar --exclude=venv --exclude=node_modules -czf deploy-package.tar.gz .
          
      - name: Upload to Oracle VM
        run: |
          echo "=== Uploading build to Oracle VM ==="
          scp -i "${{ secrets.ORACLE_SSH_KEY_FILE }}" -o StrictHostKeyChecking=no deploy-package.tar.gz ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/tmp/

      - name: Deploy on Oracle VM
        run: |
          echo "=== Deploying on Oracle VM ==="
          ssh -i "${{ secrets.ORACLE_SSH_KEY_FILE }}" -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            PROJECT_DIR=/home/${USER}/app
            BACKEND_DIR=$PROJECT_DIR/dormed_main # Corrected to dormed_main
            FRONTEND_DIR=$PROJECT_DIR/frontend
            VENV_DIR=$PROJECT_DIR/venv # Venv is now at the project root

            echo "=== Extracting new build ==="
            # Ensure the target directory for extraction is the project root.
            rm -rf "$PROJECT_DIR"/* # Clear existing files, but keep the directory
            rm -rf "$PROJECT_DIR"/.[!.]* # Remove dotfiles/directories
            tar -xzf /tmp/deploy-package.tar.gz -C "$PROJECT_DIR"

            echo "=== Installing backend dependencies ==="
            # Recreate venv on the VM if it doesn't exist.
            if [ ! -d "$VENV_DIR" ]; then
              python3 -m venv "$VENV_DIR"
            fi
            source "$VENV_DIR"/bin/activate # Activate from the project root's venv.
            pip install -r "$PROJECT_DIR"/requirements.txt # requirements.txt is at project root.

            # Now, navigate to backend directory for Django commands.
            cd "$BACKEND_DIR"
            python manage.py migrate
            python manage.py collectstatic --noinput
            deactivate

            echo "=== Restarting Gunicorn ==="
            sudo systemctl restart gunicorn
          EOF
